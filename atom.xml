<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Juvenoia.github.io</id>
    <title>2wx</title>
    <updated>2021-02-23T19:25:58.444Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Juvenoia.github.io"/>
    <link rel="self" href="https://Juvenoia.github.io/atom.xml"/>
    <subtitle>书山有路勤为径 学海无涯苦作舟</subtitle>
    <logo>https://Juvenoia.github.io/images/avatar.png</logo>
    <icon>https://Juvenoia.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 2wx</rights>
    <entry>
        <title type="html"><![CDATA[板子]]></title>
        <id>https://Juvenoia.github.io/post/ban-zi/</id>
        <link href="https://Juvenoia.github.io/post/ban-zi/">
        </link>
        <updated>2021-02-23T19:24:23.000Z</updated>
        <content type="html"><![CDATA[<h1 id="基础算法">基础算法</h1>
<p>[TOC]</p>
<h2 id="基础杂项">基础杂项</h2>
<h3 id="排序">排序</h3>
<h4 id="快排">快排</h4>
<h5 id="快排板子">快排板子</h5>
<p>核心思想： 分治</p>
<pre><code class="language-c++">const int N = 1e5+5;
int g[N];
int quick_sort(int l, int r)
{
	int p=l, q=r, x=g[l+r &gt;&gt; 1];
	while(p&lt;=q)
	{
		while(g[p] &lt; x) p++;
		while(g[q] &gt; x) q--;
		if(p&lt;=q) swap(g[p], g[q]), p++, q--;
	}
	if(q&lt;r) quick_sort(q, r);
	if(p&gt;l) quick_sort(l, p);
}
</code></pre>
<p>复杂度为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mi>l</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(nlgn)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span></p>
<h5 id="第k大数">第k大数</h5>
<pre><code class="language-c++">const int N = 1e5+5;
int g[N];
int kth_num(int l, int r, int k)
{
	int p=l, q=r, x=g[l+r &gt;&gt;1];
	while(p&lt;=q)
	{
		while(g[p] &lt; x) p++;
		while(g[q] &lt; x) q--;
		if(p&lt;=q) swap(g[p], g[q]), p++, q--;
	}
	if(p&lt;=k) return kth_num(p, r); //停在了第p个位置，比第k个要小，结果在右边
	else if(q&gt;=k) return kth_num(l, q); //不在右边结果就在左边
	else return g[l]; //前二者都不是，在中间.
}
</code></pre>
<p>复杂度为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>l</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(lgn)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span></p>
<h5 id="对顶堆">对顶堆</h5>
<p>对于多次询问第k大数，我们可以选择调用刚才的第k大数板子，复杂度为</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mi>l</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(nlgn)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span></p>
<p>但是也可以用两个堆维护，一个大顶堆一个小顶堆，被称作对顶堆</p>
<pre><code class="language-c++">//查询第k大时，此时保证元素一定足够
//声明
priority_queue&lt;int&gt; bh;//大顶堆
priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt; sh;//小顶堆
//插入操作
if(!bh.size() || x &gt; bh.top()) sh.push(x);
else bh.push(x);
//查询操作，当前要查询第k大
while(bh.size() &gt; k)
{
	int p = bh.top(); bh.pop();
	sh.push(p);
}
while(bh.size() &lt; k)
{
	int p = sh.top(); sh.pop();
	bh.push(p);
}
</code></pre>
<p>对顶堆的复杂度也可近似看作</p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mo>(</mo><mi>n</mi><mi>l</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">O(nlgn)
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span></p>
<p>对顶堆在没有删除、每次要查询的第K大数递增时时间常数要优一些.</p>
<h4 id="归并">归并</h4>
<h5 id="归并板子">归并板子</h5>
<pre><code class="language-c++">const int N = 1e5+5;
int g[N], b[N]; //b用于备份
void MergeSort(int l, int r)
{
	if(l==r) return; //边界 只有一个元素 无需排序
	int mid = l+r &gt;&gt; 1;
	MergeSort(l, mid); MergeSort(mid+1, r);
	int p=l, q=mid+1, cur=p;
	while(p&lt;=mid &amp;&amp; q&lt;=r)
	{
		if(g[p] &lt;= g[q]) b[cur++] = g[p++];
		else b[cur++] = g[q++];
	}
	while(p&lt;=mid) b[cur++] = g[p++];
	while(q&lt;=r) b[cur++] = g[q++];
	for(int i=l; i&lt;=r; i++) g[i] = b[i];
}
</code></pre>
<h5 id="逆序对的个数">逆序对的个数</h5>
<p>首先证明逆序对的个数就是归并排序中交换的次数<br>
将[1, n]的问题分解为[1, mid]与[mid+1, n]的问题<br>
如果我们知道两个子问题的解，剩下的部分解就是在左边并且比右边大的元素对数了，这用归并排序很好实现.</p>
<pre><code class="language-c++">const int N = 1e5+5;
int g[N], b[N];
void MergeSort(int l, int r)
{
	int ans = 0;
	if(l==r) return;
	int mid = l+r &gt;&gt; 1;
	MergeSort(l, mid); MergeSort(mid+1, r);
	int p=l, q=mid+1, cur=l;
	//记录右区间的方式
	while(p&lt;=mid &amp;&amp; q&lt;=r)
	{
		if(g[p] &lt;= g[q]) b[cur++] = g[p++]; //此处是小于等于
		//是因为小于等于的边界条件，如果是小于的话当两个元素相等坐标
		//q向前移动，此时答案更新，但p这个点也被算了进去.
		else b[cur++] = g[q++], ans += mid - p + 1;
	}
	while(p&lt;=mid) b[cur++] = g[p++];
	while(q&lt;=r) b[cur++] = g[q++];
	//记录左区间的方式
	while(p&lt;=mid &amp;&amp; q&lt;=r)
	{
		if(g[p] &lt;= g[q]) b[cur++] = g[p++], ans += q - (mid + 1); 
		//小于等于同理.
		//如果是小于那么会加入q. 下次更新时答案会多出来
		else b[cur++] = g[q++];
	}
	while(p&lt;=mid) b[cur++] = g[p++], ans += q - (mid + 1); //即 r - mid
	while(q&lt;=r) b[cur++] = g[q++];
	for(int i=l; i&lt;=r; i++) g[i] = b[i];
	/*有两种计数方式，更优秀的一种是记录当右区间加入时的
	  这样的计数方式只需记录一次，在后面的循环中无需记录
	  而记录左区间加入时的计数方式需要记录两次.
	*/
}
</code></pre>
<h5 id="最大子序列和">最大子序列和</h5>
<p>四种做法</p>
<ol>
<li>
<p>暴力</p>
</li>
<li>
<p>优化的暴力</p>
</li>
<li>
<p>分治</p>
</li>
<li>
<p>dp<br>
暴力和优化的暴力见视频   <a href="https://www.bilibili.com/video/BV1P54y1s7gu">子序列最值</a></p>
</li>
</ol>
<p>这里分析一下这个题目为什么能用分治</p>
<p>问题[1, n]可以分解为[1,mid]与[mid+1]. 随后的横跨问题也很好解决，所以是天然的分治模板</p>
<h3 id="二分">二分</h3>
<h4 id="整数二分">整数二分</h4>
<h5 id="大于等于模板">大于等于模板</h5>
<pre><code class="language-c++">const int N = 1e5+5;
int g[N];
int l=1, r=n;
int x; //query
while(l&lt;r)
{
	int mid = l + r &gt;&gt; 1;
	if(g[mid] &gt;= x) r = mid;
	else l = mid + 1;
}
</code></pre>
<h5 id="小于等于模板">小于等于模板</h5>
<pre><code class="language-c++">const int N = 1e5+5;
int g[N];
int l=1, r=n;
int x; //query
while(l&lt;r)
{
	int mid = l+r+1 &gt;&gt; 1;
	if(g[mid] &lt;= x) l=mid;
	else r = mid-1;
}
</code></pre>
<p>注意小于等于时候要加1防止死循环</p>
<h4 id="浮点数二分">浮点数二分</h4>
<p>例:<br>
给定一个浮点数n，求它的三次方根。<a href="https://www.acwing.com/problem/content/792/">数的三次方根</a></p>
<p class='katex-block'><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">−</mi><mn>10000</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>10000</mn></mrow><annotation encoding="application/x-tex">−10000≤n≤10000
</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.78041em;vertical-align:-0.13597em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7719400000000001em;vertical-align:-0.13597em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span><span class="mord">0</span></span></span></span></span></p>
<pre><code class="language-c++">
double l=-100， r=100;
double n; cin&gt;&gt;n;
while(fabs(l-r) &lt;= 1e-7)
{
    double mid = (l+r)/2;
    if(mid*mid*mid&lt;=n) l=mid;
    else r=mid;
}
</code></pre>
<p>浮点数不需要考虑小于等于板子加一的问题，因为有fabs做保证。</p>
<!--等待补全，例题不足-->
<h3 id="高精度">高精度</h3>
<h4 id="高精度加法">高精度加法</h4>
<pre><code class="language-C++">// C = A + B, A &gt;= 0, B &gt;= 0
vector&lt;int&gt; add(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B)
{
    if (A.size() &lt; B.size()) return add(B, A);

    vector&lt;int&gt; C;
    int t = 0;
    for (int i = 0; i &lt; A.size(); i ++ )
    {
        t += A[i];
        if (i &lt; B.size()) t += B[i];
        C.push_back(t % 10);
        t /= 10;
    }

    if (t) C.push_back(t);
    return C;
}
</code></pre>
<h4 id="高精度减法">高精度减法</h4>
<pre><code class="language-C++">// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0
vector&lt;int&gt; sub(vector&lt;int&gt; &amp;A, vector&lt;int&gt; &amp;B)
{
    vector&lt;int&gt; C;
    for (int i = 0, t = 0; i &lt; A.size(); i ++ )
    {
        t = A[i] - t;
        if (i &lt; B.size()) t -= B[i];
        C.push_back((t + 10) % 10);
        if (t &lt; 0) t = 1;
        else t = 0;
    }

    while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();
    return C;
}
</code></pre>
<h4 id="高精度乘法">高精度乘法</h4>
<pre><code class="language-C++">//高精度乘以低精度
// C = A * b, A &gt;= 0, b &gt; 0
vector&lt;int&gt; mul(vector&lt;int&gt; &amp;A, int b)
{
    vector&lt;int&gt; C;

    int t = 0;
    for (int i = 0; i &lt; A.size() || t; i ++ )
    {
        if (i &lt; A.size()) t += A[i] * b;
        C.push_back(t % 10);
        t /= 10;
    }

    while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();

    return C;
}
</code></pre>
<pre><code class="language-C++">//高精度乘以高精度O(n2)，必要时用FFT优化
vector&lt;int&gt; mul(vector&lt;int&gt; A, vector&lt;int&gt; B)
{
    vector&lt;int&gt; C(A.size() + B.size());

    for (int i = 0; i &lt; A.size(); i ++ )
        for (int j = 0; j &lt; B.size(); j ++ )
            C[i + j] += A[i] * B[j];

    for (int i = 0, t = 0; i &lt; C.size() || t; i ++ )
    {
        t += C[i];
        if (i &gt;= C.size()) C.push_back(t % 10);
        else C[i] = t % 10;
        t /= 10;
    }

    while (C.size() &gt; 1 &amp;&amp; !C.back()) C.pop_back();

    return C;
}
</code></pre>
<h4 id="高精度除法">高精度除法</h4>
<pre><code class="language-C++">// A / b = C ... r, A &gt;= 0, b &gt; 0
vector&lt;int&gt; div(vector&lt;int&gt; &amp;A, int b, int &amp;r)
{
    vector&lt;int&gt; C;
    r = 0;
    for (int i = A.size() - 1; i &gt;= 0; i -- )
    {
        r = r * 10 + A[i];
        C.push_back(r / b);
        r %= b;
    }
    reverse(C.begin(), C.end());
    while (C.size() &gt; 1 &amp;&amp; C.back() == 0) C.pop_back();
    return C;
}
</code></pre>
<h4 id="高精度比大小">高精度比大小</h4>
<pre><code class="language-C++">vector&lt;int&gt; max_vec(vector&lt;int&gt; a, vector&lt;int&gt; b)
{
	if(a.size() &gt; b.size()) return a;
	if(a.size() &lt; b.size()) return b;
	if(vector&lt;int&gt;(a.rbegin(), a.rend()) &gt; 
	vector&lt;int&gt;(b.rbegin(), b.rend())) return a;
	return b;
}
</code></pre>
<h4 id="高精度输出">高精度输出</h4>
<pre><code class="language-C++">void output(vector&lt;int&gt; a)
{
	for(int i=a.size()-1; i&gt;=0; i--) cout&lt;&lt;a[i]; 
}
</code></pre>
<h3 id="前缀差分">前缀差分</h3>
<h4 id="一维">一维</h4>
<h5 id="一维前缀和">一维前缀和</h5>
<h5 id="一维差分">一维差分</h5>
<h4 id="二维">二维</h4>
<h5 id="二维前缀和">二维前缀和</h5>
<h5 id="二维差分">二维差分</h5>
<h3 id="双指针">双指针</h3>
<p>双指针与其说是一种算法，不如说是一种思维，将问题无用的部份遗弃掉。<br>
这里给出双指针的几个简单例子，更多的例子请见双指针专题。</p>
<h3 id="位运算">位运算</h3>
<p>位运算牵扯到的问题也很多，这里给出一个简单的lowbit运算的例子，更多的例子请见位运算专题。</p>
<h3 id="区间问题">区间问题</h3>
<h4 id="离散化">离散化</h4>
<h4 id="区间合并">区间合并</h4>
<h2 id="数据结构">数据结构</h2>
<h3 id="链表">链表</h3>
<h4 id="单链表">单链表</h4>
<h4 id="双链表">双链表</h4>
<h3 id="栈">栈</h3>
<h4 id="手写模拟">手写模拟</h4>
<h4 id="单调栈">单调栈</h4>
<h3 id="队列">队列</h3>
<h4 id="手写模拟-2">手写模拟</h4>
<h4 id="单调队列">单调队列</h4>
<h3 id="kmp">KMP</h3>
<h3 id="trie">Trie</h3>
<h3 id="并查集">并查集</h3>
<h4 id="朴素并查集">朴素并查集</h4>
<h4 id="带路径压缩的并查集">带路径压缩的并查集</h4>
<h4 id="维护一些特殊属性的并查集">维护一些特殊属性的并查集</h4>
<h3 id="堆">堆</h3>
<h4 id="手写堆">手写堆</h4>
<h4 id="堆排序">堆排序</h4>
<h3 id="哈希表">哈希表</h3>
<h4 id="模拟散列表">模拟散列表</h4>
<h4 id="字符串哈希">字符串哈希</h4>
<h2 id="搜索与图论">搜索与图论</h2>
<h3 id="dfs">DFS</h3>
<h4 id="概述">概述</h4>
<h4 id="基本策略">基本策略</h4>
<h3 id="bfs">BFS</h3>
<h4 id="概述-2">概述</h4>
<h4 id="基本策略-2">基本策略</h4>
<h3 id="图的两种存储方式">图的两种存储方式</h3>
<h3 id="图的dfs">图的DFS</h3>
<h4 id="树的重心">树的重心</h4>
<h3 id="图的bfs">图的BFS</h3>
<h3 id="拓扑排序">拓扑排序</h3>
<h4 id="拓扑排序的实现">拓扑排序的实现</h4>
<h4 id="利用拓扑排序判断环">利用拓扑排序判断环</h4>
<h3 id="最短路">最短路</h3>
<h4 id="dijkstra">Dijkstra</h4>
<h5 id="朴素">朴素</h5>
<h5 id="堆优化">堆优化</h5>
<h4 id="bellman-ford">bellman-ford</h4>
<h5 id="板子">板子</h5>
<h5 id="应用-求边数限制的最短路">应用: 求边数限制的最短路</h5>
<h4 id="spfa">spfa</h4>
<h5 id="板子-2">板子</h5>
<h5 id="应用求负权最短路">应用:求负权最短路</h5>
<h5 id="应用-判断负环">应用: 判断负环</h5>
<h4 id="floyd">Floyd</h4>
<h5 id="板子-3">板子</h5>
<h3 id="最小生成树">最小生成树</h3>
<h4 id="prim">Prim</h4>
<h5 id="朴素-2">朴素</h5>
<h5 id="堆优化-2">堆优化</h5>
<h4 id="kruskal">Kruskal</h4>
<h5 id="朴素-3">朴素</h5>
<h5 id="排序优化">排序优化</h5>
<h3 id="二分图">二分图</h3>
<h4 id="染色法判定二分图">染色法判定二分图</h4>
<p>匈牙利算法--二分图的最大匹配</p>
<h2 id="dp">dp</h2>
<h3 id="背包">背包</h3>
<h4 id="01背包">01背包</h4>
<h4 id="完全背包">完全背包</h4>
<h4 id="多重背包">多重背包</h4>
<h4 id="多重背包二进制优化">多重背包二进制优化</h4>
<h4 id="分组背包">分组背包</h4>
<h3 id="线性dp">线性dp</h3>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://Juvenoia.github.io/post/hello-gridea/</id>
        <link href="https://Juvenoia.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>